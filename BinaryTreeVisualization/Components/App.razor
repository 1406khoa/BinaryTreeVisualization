<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="BinaryTreeVisualization.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />

</head>

<body>
    <Routes />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>

    <script>
        window.preventContextMenu = function() {
            document.addEventListener('contextmenu', function(event) {
                event.preventDefault();
            });
        };

        window.addOutsideClickListener = (dotNetHelper) => {
            document.addEventListener('click', function (event) {
                const dropdownField = document.querySelectorAll('.dropdown-menu');
                const inputField = document.querySelectorAll('.dropdown-input');

                let clickedOnInput = Array.from(inputField).some(input => input.contains(event.target));
                let clickedOnDropdown = Array.from(dropdownField).some(dropdown => dropdown.contains(event.target));
                
                if (clickedOnInput || clickedOnDropdown) {
                    return;
                }

                dotNetHelper.invokeMethodAsync('HideDropdown');
            });
        };

        window.updateTraversalStep = (index) => {
            const element = document.querySelector(`#traversal-step-${index}`);
            if (element) {
                element.classList.remove('hidden');
                element.classList.add('visible');
            }
        };

        window.animateLine = function (lineId, fromCoords, toCoords, duration) {
        var line = document.getElementById(lineId);
        if (line) {
            anime({
                targets: line,
                x1: [fromCoords.x1, toCoords.x1],
                y1: [fromCoords.y1, toCoords.y1],
                x2: [fromCoords.x2, toCoords.x2],
                y2: [fromCoords.y2, toCoords.y2],
                duration: duration,
                easing: 'easeInOutQuad'
            });
        }
    };
        window.controlHoverVideo = function () {
            document.querySelectorAll('.function-box').forEach(box => {
                const video = box.querySelector('.hover-video');

                // Phát video khi hover vào .function-box
                box.addEventListener('mouseenter', function () {
                    video.currentTime = 0; // Đặt lại video về điểm bắt đầu
                    video.play(); // Phát video
                });

                // Dừng và đặt lại video khi rời khỏi hover
                box.addEventListener('mouseleave', function () {
                    video.pause(); // Dừng video
                    video.currentTime = 0; // Đặt lại video về điểm bắt đầu
                });
            });
        };

        // Gọi hàm này trong JavaScript khi trang được tải
        window.controlHoverVideo();

    </script>

    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MatBlazor/dist/matBlazor.js"></script>
    <link href="_content/MatBlazor/dist/matBlazor.css" rel="stylesheet" />
    <link href="./tailwind.css" rel="stylesheet" />


</body>

</html>
