@page "/bst"
@rendermode InteractiveServer
@inject BSTService bstService

<PageTitle>Binary Search Tree</PageTitle>

<h4>Basic Operation</h4>
<div class="basic-operation">
    <div class="add">
        <input class="first-input" type="number" @bind="newNodeValue" />
        <button class="button" @onclick="AddNode">Add Node</button>
    </div>
    <div class="edit">
        <input type="number" @bind="editedNodeValue" />
        <button class="button" @onclick="EditNode">Edit Node</button>
    </div>
    <div class="delete-node">
        <input type="number" @bind="nodeToDeleteValue" />
        <button class="button" @onclick="DeleteNode">Delete Node</button>
    </div>
    <div class="find">
        <input type="number" @bind="searchNodeValue" />
        <button class="button" @onclick="FindNode">Find Node</button>
    </div>
    <div class="delete-tree">
        <button class="button" @onclick="DeleteTree">Delete Tree</button>
    </div>
</div>

<div class="random-tree">
    <h4>Create Random Tree</h4>
    <div>
        <label>Number of Nodes:</label>
        <input type="number" @bind="nodeCount" />
        <label>Min Value:</label>
        <input type="number" @bind="minValue" />
        <label>Max Value:</label>
        <input type="number" @bind="maxValue" />
        <button class="create-random-button" @onclick="CreateRandomTree">Create Random Tree</button>
    </div>
</div>

<div class="browse-tree">
    <label>Select Traversal Method</label>
    <select @onchange="OnTraversalMethodChange">
        <option value="pre-order">Pre-order (NLR)</option>
        <option value="in-order" selected>In-order (LNR)</option>
        <option value="post-order">Post-order (LRN)</option>
        <option value="reverse-in-order">Reverse In-order (RNL)</option>
    </select>
</div>

<!-- Thông báo trạng thái -->
<p style="color: green">@statusMessage</p> <!-- Thêm thông báo trạng thái tại đây -->
<!-- Phần hiển thị dãy số khi duyệt cây -->
<h4>Traversal Order</h4>
<div style="background-color: #f0f0f0; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
    <p>@traversalOrderDisplay</p>
</div>

<!-- Khối SVG -->
<svg width="100%" height="100vh" style="overflow: visible;">
    @foreach (var line in lines)
    {
        <!-- Đường nối giữa các node -->
        <line x1="@line.x1" y1="@line.y1" x2="@line.x2" y2="@line.y2"
              stroke="@((line.IsHighlighted) ? "yellow" : "black")" stroke-width="2" />
    }

    @foreach (var nodePosition in nodePositions)
    {
        <!-- Vẽ hình tròn cho node, tô màu nếu là node được thêm -->
        <circle class="node-circle @((nodePosition.node == selectedNode) ? "is-selected" : "")"
                cx="@nodePosition.x" cy="@nodePosition.y" r="20" stroke="black" stroke-width="2"
                fill="@((nodePosition.node.IsHighlighted) ? "yellow" : "white")"
                @onclick="(() => OnNodeClick(nodePosition.node))" />

        <!-- Sử dụng RenderFragment để in giá trị -->
        @((RenderFragment)((builder) =>
            {
                builder.OpenElement(0, "text");
                builder.AddAttribute(1, "x", nodePosition.x);
                builder.AddAttribute(2, "y", nodePosition.y);
                builder.AddAttribute(3, "text-anchor", "middle");
                builder.AddAttribute(4, "dominant-baseline", "middle");
                builder.AddAttribute(5, "dy", "0.35em"); // Điều chỉnh vị trí văn bản
                builder.AddAttribute(6, "font-size", "12");
                builder.AddAttribute(7, "font-weight", "bold");
                builder.AddAttribute(8, "fill", "black");
                builder.AddAttribute(9, "cursor", "pointer");
                builder.AddContent(10, nodePosition.node.Value.ToString());
                builder.CloseElement();
            }))
    }
</svg>

@code {
    @using BinaryTreeVisualization.Components.Services

    private int newNodeValue;
    private int nodeToDeleteValue;
    private int searchNodeValue;
    private int editedNodeValue;
    private NodeService? selectedNode;
    private List<(NodeService node, double x, double y)> nodePositions = new List<(NodeService node, double x, double y)>();
    private List<(double x1, double y1, double x2, double y2, bool IsHighlighted, Guid LineID)>
        lines = new List<(double x1, double y1, double x2, double y2, bool IsHighlighted, Guid LineID)>();
    private string selectedTraversalMethod = "in-order"; // Kiểu duyệt cây mặc định là In-order

    // Dãy số theo thứ tự duyệt cây
    private string traversalOrderDisplay = "";

    //Phần khai báo để sử dụng cho hàm random
    private int nodeCount;
    private int minValue;
    private int maxValue;

    // Biến để chứa thông báo trạng thái
    private string statusMessage = "Tree initialized."; // Thông báo trạng thái ban đầu

    private async Task AddNode()
    {
        var newNodeID = bstService.AddNode(newNodeValue); // Lấy NodeID của node vừa được thêm
        UpdateTreeDrawing();

        // Thực hiện tô màu node và đường line trong 2 giây
        HighlightNodeAndLine(newNodeID);
        await Task.Delay(2000);

        // Khôi phục lại màu mặc định sau khi tô màu
        RemoveHighlighting();
        UpdateTreeDrawing();  // Cập nhật lại giao diện
    }

    private void OnTraversalMethodChange(ChangeEventArgs e)
    {
        selectedTraversalMethod = e.Value?.ToString() ?? "in-order"; // Lấy kiểu duyệt từ select box
        statusMessage = $"Traversal method changed to {selectedTraversalMethod}."; // Cập nhật thông báo

        // Chỉ cần thay đổi kiểu duyệt mà không tái cấu trúc lại cây
        bstService.SetTraversalType(selectedTraversalMethod);
        UpdateTreeDrawing(); // Vẽ lại cây theo kiểu duyệt mới
    }

    private void RemoveHighlighting()
    {
        foreach (var node in nodePositions)
        {
            node.node.IsHighlighted = false;
        }

        for (int i = 0; i < lines.Count; i++)
        {
            lines[i] = (lines[i].x1, lines[i].y1, lines[i].x2, lines[i].y2, IsHighlighted: false, lines[i].LineID);
        }
    }

    private void HighlightNodeAndLine(Guid newNodeID)
    {
        var newNode = nodePositions.FirstOrDefault(np => np.node.NodeID == newNodeID);
        if (newNode.node == null) return;

        newNode.node.IsHighlighted = true;

        var parentLine = bstService.GetParentLine(newNode.node);
        if (parentLine != null)
        {
            var lineToHighlight = lines.FirstOrDefault(line =>
                line.x1 == parentLine.Value.x1 && line.y1 == parentLine.Value.y1 &&
                line.x2 == parentLine.Value.x2 && line.y2 == parentLine.Value.y2);

            if (lineToHighlight != default)
            {
                int index = lines.IndexOf(lineToHighlight);
                if (index != -1)
                {
                    lines[index] = (lines[index].x1, lines[index].y1, lines[index].x2, lines[index].y2, IsHighlighted: true, lines[index].LineID);
                }
            }
        }
    }

    private void UpdateTreeDrawing()
    {
        var nodesInTraversalOrder = bstService.TraverseTree(bstService.Root, selectedTraversalMethod);

        if (bstService.Root != null)
        {
            bstService.AssignPositionsBasedOnTreeStructure(bstService.Root, bstService.GetRootX(), bstService.GetRootY(), 200);
        }

        nodePositions = bstService.GetNodePositions(bstService.Root, selectedTraversalMethod);

        lines = bstService.GetLines()
                           .Select(line => (
                               line.x1, line.y1, line.x2, line.y2,
                               IsHighlighted: false,
                               LineID: Guid.NewGuid()
                           )).ToList();
        // Cập nhật dãy số duyệt cây
        traversalOrderDisplay = string.Join(" -> ", nodesInTraversalOrder.Select(n => n.Value));
        StateHasChanged();
    }

    private void CreateRandomTree()
    {
        bstService.ResetTree();
        bstService.BuildRandomTree(nodeCount, minValue, maxValue, "BinarySearchTree");
        UpdateTreeDrawing();
    }

    private void DeleteTree()
    {
        bstService.ResetTree();
        UpdateTreeDrawing();
        StateHasChanged();
    }

    private void DeleteNode()
    {
        bool isDeleted = bstService.DeleteNode(nodeToDeleteValue);

        UpdateTreeDrawing(); // Cập nhật lại giao diện sau khi xóa
    }

    //Hàm để lưu thông tin và tô màu node được chọn
    private void OnNodeClick(NodeService node)
    {
        // Nếu nút đã được chọn, hủy chọn
        if (selectedNode == node)
        {
            selectedNode = null; // Gỡ chọn node
            statusMessage = "Node deselected.";
        }
        else
        {
            selectedNode = node; // Gán node mới được chọn
            statusMessage = $"Selected node: {node.Value}";
        }

        UpdateTreeDrawing();
    }

    private async Task EditNode()
    {
        if (selectedNode != null)
        {
            // Lưu ID của nút cũ để xóa
            var oldNodeID = selectedNode.NodeID;

            // Xóa nút cũ
            bstService.DeleteNode(selectedNode.Value);

            // Thêm nút mới với giá trị đã chỉnh sửa
            var newNodeID = bstService.AddNode(editedNodeValue);

            UpdateTreeDrawing();

            HighlightNodeAndLine(newNodeID);
            await Task.Delay(2000);

            RemoveHighlighting();
            UpdateTreeDrawing();
        }
    }

    private async Task FindNode()
    {
        RemoveHighlighting(); // Đặt lại trạng thái trước khi tìm kiếm
        var foundNode = bstService.SearchNode(bstService.Root, searchNodeValue);
        if (foundNode != null)
        {
            // Tô màu cho các nút trên đường đi
            await HighlightPathToNode(bstService.Root, searchNodeValue);

            // Tô màu cho nút đã tìm thấy
            foundNode.IsHighlighted = true;
            UpdateTreeDrawing();
        }

        await Task.Delay(2000);
        RemoveHighlighting();
        UpdateTreeDrawing();
    }

    private async Task HighlightPathToNode(NodeService? currentNode, int targetValue)
    {
        if (currentNode == null) return;

        currentNode.IsHighlighted = true;
        UpdateTreeDrawing();

        await Task.Delay(1000);

        // Nếu tìm thấy giá trị, dừng lại
        if (currentNode.Value == targetValue) return;

        // Nhỏ hơn tìm bên trái, lớn hơn tìm bên phải
        if (targetValue < currentNode.Value)
        {
            await HighlightPathToNode(currentNode.LeftChild, targetValue);
        }
        else
        {
            await HighlightPathToNode(currentNode.RightChild, targetValue);
        }
    }
}
