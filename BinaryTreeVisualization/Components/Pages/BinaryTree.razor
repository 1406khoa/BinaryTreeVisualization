@page "/binarytree"
@rendermode InteractiveServer
@inject BinaryTreeService binaryTreeService

<PageTitle>Binary Tree</PageTitle>

<h4>Basic Operation</h4>
<div class="basic-operation">
    <div class="add">
        <input class="first-input" type="number" @bind="newNodeValue" />
        <button class="button" @onclick="AddNode">Add Node</button>
    </div>
    <div class="edit">
        <input type="number" @bind="editedNodeValue" />
        <button class="button" @onclick="EditNodeInBT">Edit Node</button>
    </div>
    <div class="delete-node">
        <input type="number" @bind="nodeToDeleteValue" />
        <button class="button" @onclick="DeleteNode">Delete Node</button>
    </div>
    <div class="find">
        <input type="number" @bind="searchNodeValue" />
        <button class="button" @onclick="StartFindNodeAnimation">Find Node</button>
    </div>
    <div class="delete-tree">
        <button class="button" @onclick="DeleteTree">Delete Tree</button>
    </div>
</div>

<div class="random-tree">
    <h4>Create Random Tree</h4>
    <div>
        <label>Number of Nodes:</label>
        <input type="number" @bind="nodeCount" />
        <label>Min Value:</label>
        <input type="number" @bind="minValue" />
        <label>Max Value:</label>
        <input type="number" @bind="maxValue" />
        <button class="create-random-button" @onclick="CreateRandomTree">Create Random Tree</button>
    </div>
</div>

<div class="browse-tree">
    <label>Select Traversal Method</label>
    <select @onchange="OnTraversalMethodChange">
        <option value="pre-order">Pre-order (NLR)</option>
        <option value="in-order" selected>In-order (LNR)</option>
        <option value="post-order">Post-order (LRN)</option>
        <option value="reverse-in-order">Reverse In-order (RNL)</option>
    </select>
</div>

<!-- Thông báo trạng thái -->
<p style="color: green">@statusMessage</p>

<!-- Phần hiển thị dãy số khi duyệt cây -->
<h4>Traversal Order</h4>
<div style="background-color: #f0f0f0; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
    <p>@traversalOrderDisplay</p>
</div>


    You can choose your speed here.

<div class="custom-slider">
    <MatSlider @bind-Value="@Val3" Discrete="true" Pin="true" TValue="int" ValueMin="1" ValueMax="3"></MatSlider>
</div>
<p>Speed Multiplier: @Val3</p>

<!-- Khối SVG -->
<svg width="100%" height="100vh" style="overflow: visible;">
    @foreach (var line in lines)
    {
        <!-- Đường nối giữa các node -->
        <line x1="@line.x1" y1="@line.y1" x2="@line.x2" y2="@line.y2"
              stroke="@((line.IsHighlighted) ? "yellow" : "black")" stroke-width="2" />
    }

    @foreach (var nodePosition in nodePositions)
    {
        <!-- Vẽ hình tròn cho node, tô màu nếu là node được thêm -->
        <circle class="node-circle @((nodePosition.node == selectedNode) ? "is-selected" : "")"
                cx="@nodePosition.x" cy="@nodePosition.y" r="20" stroke="black" stroke-width="2"
                fill="@((nodePosition.node.IsHighlighted) ? "yellow" : "white")"
                @onclick="(() => OnNodeClick(nodePosition.node))"
                @oncontextmenu:preventDefault="true"
                @oncontextmenu="(() => ShowDropdown(nodePosition.node))" />
        
        <!-- Sử dụng RenderFragment để in giá trị -->
        @((RenderFragment)((builder) =>
            {
                builder.OpenElement(0, "text");
                builder.AddAttribute(1, "x", nodePosition.x);
                builder.AddAttribute(2, "y", nodePosition.y);
                builder.AddAttribute(3, "text-anchor", "middle");
                builder.AddAttribute(4, "dominant-baseline", "middle");
                builder.AddAttribute(5, "dy", "0.35em"); // Điều chỉnh vị trí văn bản
                builder.AddAttribute(6, "font-size", "12");
                builder.AddAttribute(7, "font-weight", "bold");
                builder.AddAttribute(8, "fill", "black");
                builder.AddAttribute(9, "cursor", "pointer");
                builder.AddContent(10, nodePosition.node.Value.ToString());
                builder.CloseElement();
            }))

        <!-- Dropdown menu -->
        @if (showDropdown)
        {
            <foreignObject x="@dropdownX" y="@dropdownY" width="160" height="180"
                           xmlns:xhtml="http://www.w3.org/1999/xhtml">
                <xhtml:div class="dropdown-menu">
                    <xhtml:button class="dropdown-button" 
                        @onclick="() => AddNodeToDirection(true)">Add Left Child</xhtml:button>
                    <xhtml:button class="dropdown-button"
                        @onclick="() => AddNodeToDirection(false)">Add Right Child</xhtml:button>
                    <xhtml:button class="dropdown-button"
                        @onclick="HideDropdown">Close</xhtml:button>
                </xhtml:div>
            </foreignObject>
        }
    }

    <!-- Hình tròn kiểm soát viên -->
    @if (showController)
    {
        <circle cx="@controllerPosition.X" cy="@controllerPosition.Y" r="20" stroke="green" stroke-width="3" fill="none" />
    }
</svg>

@code {
    @using BinaryTreeVisualization.Components.Services
    @using System.Numerics

    private int newNodeValue;
    private int nodeToDeleteValue;
    private int searchNodeValue;
    private int editedNodeValue;
    private NodeService? selectedNode;
    private List<(NodeService node, double x, double y)> nodePositions = new List<(NodeService node, double x, double y)>();
    private List<(double x1, double y1, double x2, double y2, bool IsHighlighted, Guid LineID)> 
        lines = new List<(double x1, double y1, double x2, double y2, bool IsHighlighted, Guid LineID)>();
    private string selectedTraversalMethod = "in-order"; // Kiểu duyệt cây mặc định là In-order

    // Dãy số theo thứ tự duyệt cây
    private string traversalOrderDisplay = "";

    //Phần khai báo để sử dụng cho hàm random
    private int nodeCount;
    private int minValue;
    private int maxValue;

    // Biến để chứa thông báo trạng thái
    private string statusMessage = "Tree initialized."; // Thông báo trạng thái ban đầu

    // Biến liên quan dropdown menu
    private bool showDropdown = false;
    private double dropdownX;
    private double dropdownY;

    // Biến liên quan đến animation
    private bool showController = false;
    private Vector2 controllerPosition = new Vector2(0, 0);  // Vị trí kiểm soát viên
    public int Val3
    {
        get => _val3;
        set
        {
            _val3 = value;
            this.StateHasChanged();
        }
    }

    private int _val3 = 1; // Giá trị mặc định là 1, tương ứng với tốc độ ban đầu.


    private async Task AddNode()
    {
        Guid newNodeID;
        if (selectedNode == null)
        {
            // Nếu chưa chọn nút nào, thêm nút gốc
            newNodeID = binaryTreeService.AddNodeToBinaryTree(newNodeValue, null);
        }
        else
        {
            // Nếu đã chọn nút, thêm vào nút đã chọn
            newNodeID = binaryTreeService.AddNodeToBinaryTree(newNodeValue, selectedNode);
        }

        UpdateTreeDrawing();

        HighlightNodeAndLine(newNodeID);
        await Task.Delay(2000);

        RemoveHighlighting();
        UpdateTreeDrawing();  
    }

    private void ShowDropdown(NodeService node)
    {
        selectedNode = node;
        
        dropdownX = node.PositionX - 20;
        dropdownY = node.PositionY;
        showDropdown = true;
    }

    private void HideDropdown()
    {
        showDropdown = false;
        StateHasChanged();
    }

    private async Task AddNodeToDirection(bool selectedLeftChild)
    {
        Guid newNodeID;
        if (selectedNode != null)
        {
            newNodeID = binaryTreeService.AddNodeToBinaryTree(newNodeValue, selectedNode, selectedLeftChild);
            UpdateTreeDrawing();

            HighlightNodeAndLine(newNodeID);
            HideDropdown();
            await Task.Delay(2000);

            RemoveHighlighting();
            UpdateTreeDrawing();
        }
    }

    private void OnTraversalMethodChange(ChangeEventArgs e)
    {
        selectedTraversalMethod = e.Value?.ToString() ?? "in-order"; // Lấy kiểu duyệt từ select box
        statusMessage = $"Traversal method changed to {selectedTraversalMethod}."; // Cập nhật thông báo

        // Chỉ cần thay đổi kiểu duyệt mà không tái cấu trúc lại cây
        binaryTreeService.SetTraversalType(selectedTraversalMethod);
        UpdateTreeDrawing(); // Vẽ lại cây theo kiểu duyệt mới
    }

    private void RemoveHighlighting()
    {
        foreach (var node in nodePositions)
        {
            node.node.IsHighlighted = false;
        }

        for (int i = 0; i < lines.Count; i++)
        {
            lines[i] = (lines[i].x1, lines[i].y1, lines[i].x2, lines[i].y2, IsHighlighted: false, lines[i].LineID);
        }
    }

    private void HighlightNodeAndLine(Guid newNodeID)
    {
        var newNode = nodePositions.FirstOrDefault(np => np.node.NodeID == newNodeID);
        if (newNode.node == null) return;

        newNode.node.IsHighlighted = true;

        var parentLine = binaryTreeService.GetParentLine(newNode.node);
        if (parentLine != null)
        {
            var lineToHighlight = lines.FirstOrDefault(line =>
                line.x1 == parentLine.Value.x1 && line.y1 == parentLine.Value.y1 &&
                line.x2 == parentLine.Value.x2 && line.y2 == parentLine.Value.y2);

            if (lineToHighlight != default)
            {
                int index = lines.IndexOf(lineToHighlight);
                if (index != -1)
                {
                    lines[index] = (lines[index].x1, lines[index].y1, lines[index].x2, lines[index].y2, IsHighlighted: true, lines[index].LineID);
                }
            }
        }
    }

    private void UpdateTreeDrawing()
    {
        var nodesInTraversalOrder = binaryTreeService.TraverseTree(binaryTreeService.Root, selectedTraversalMethod);

        if (binaryTreeService.Root != null)
        {
            binaryTreeService.AssignPositionsBasedOnTreeStructure(binaryTreeService.Root, binaryTreeService.GetRootX(), binaryTreeService.GetRootY(), 200);
        }

        nodePositions = binaryTreeService.GetNodePositions(binaryTreeService.Root, selectedTraversalMethod);

        lines = binaryTreeService.GetLines()
                           .Select(line => (
                               line.x1, line.y1, line.x2, line.y2,
                               IsHighlighted: false,
                               LineID: Guid.NewGuid()
                           )).ToList();
        // Cập nhật dãy số duyệt cây
        traversalOrderDisplay = string.Join(" -> ", nodesInTraversalOrder.Select(n => n.Value));
        StateHasChanged();
    }

    private void CreateRandomTree()
    {
        binaryTreeService.ResetTree();
        binaryTreeService.BuildRandomTree(nodeCount, minValue, maxValue, "BinarySearchTree");
        UpdateTreeDrawing();
    }

    private void DeleteTree()
    {
        binaryTreeService.ResetTree();
        UpdateTreeDrawing();
        StateHasChanged();
    }

    private void DeleteNode()
    {
        bool isDeleted = binaryTreeService.DeleteNode(nodeToDeleteValue);

        UpdateTreeDrawing(); // Cập nhật lại giao diện sau khi xóa
    }

    //Hàm để lưu thông tin và tô màu node được chọn
    private void OnNodeClick(NodeService node)
    {
        // Nếu nút đã được chọn, hủy chọn
        if (selectedNode == node)
        {
            selectedNode = null; // Gỡ chọn node
            statusMessage = "Node deselected.";
        }
        else
        {
            selectedNode = node; // Gán node mới được chọn
            statusMessage = $"Selected node: {node.Value}";
        }

        UpdateTreeDrawing();
    }

    private async Task EditNode()
    {
        if (selectedNode != null) //Kiểm tra xem đã chọn node để chỉnh sửa chưa
        {
            // Lưu ID của nút cũ để xóa
            var oldNodeID = selectedNode.NodeID;

            // Xóa nút cũ
            binaryTreeService.DeleteNode(selectedNode.Value);

            // Thêm nút mới với giá trị đã chỉnh sửa
            var newNodeID = binaryTreeService.AddNode(editedNodeValue);

            UpdateTreeDrawing();

            HighlightNodeAndLine(newNodeID);
            await Task.Delay(2000);

            RemoveHighlighting();
            UpdateTreeDrawing();
        }
    }
    // --------------------- FIND NODE ANIMATION HERE ---------------------

    protected override void OnInitialized()
    {
        // Cài đặt vị trí kiểm soát viên ở node gốc
        if (binaryTreeService.Root != null)
        {
            controllerPosition = new Vector2((float)binaryTreeService.Root.PositionX, (float)binaryTreeService.Root.PositionY);
        }
        else
        {
            controllerPosition = new Vector2(800, 50); // Nếu chưa có node gốc, đặt vị trí mặc định
        }

        showController = false; // Kiểm soát viên ẩn
    }

    private async Task StartFindNodeAnimation()
    {
        // Gọi hàm SearchNodeInternalAsync để tìm node và xử lý animation
        bool result = await SearchNodeInternalAsync(searchNodeValue);

        // Kiểm tra kết quả từ SearchNodeInternalAsync
        if (!result)
        {
            statusMessage = $"Node {searchNodeValue} does not exist.";
        }
        else
        {
            statusMessage = $"Node {searchNodeValue} found successfully.";
        }

        UpdateTreeDrawing(); // Cập nhật lại hiển thị cây sau khi tìm kiếm hoàn thành
    }


    // Hàm tìm kiếm node và di chuyển kiểm soát viên dọc theo đường đi với độ trễ
    private async Task<bool> SearchNodeInternalAsync(int targetValue)
    {
        // Tìm node cần tìm bằng DFS
        var foundNode = DFSFindNode(binaryTreeService.Root, targetValue);

        if (foundNode == null)
        {
            statusMessage = $"Node {targetValue} does not exist."; // Thông báo nếu không tìm thấy
            return false;
        }

        // Nếu tìm thấy node cần tìm và nó là node gốc
        if (foundNode == binaryTreeService.Root)
        {
            foundNode.IsHighlighted = true; // Tô sáng node gốc
            UpdateTreeDrawing();
            statusMessage = $"Found root node {targetValue}.";
            await Task.Delay(2000); // Dừng lại 2 giây
            foundNode.IsHighlighted = false; // Tắt sáng node gốc sau 2 giây
            UpdateTreeDrawing();
            return true; // Kết thúc tìm kiếm
        }

        // Thu thập danh sách các LineID từ root đến node cần tìm
        var path = CollectLinesToNode(foundNode);

        if (path.Count == 0)
        {
            statusMessage = "No path found.";
            return false;
        }

        // Hiển thị kiểm soát viên
        showController = true;

        // Di chuyển kiểm soát viên dọc theo các line với độ trễ để giảm hiện tượng nảy
        foreach (var line in path)
        {
            Vector2 destination = new Vector2((float)line.x2, (float)line.y2);
            await MoveControllerToPosition(destination);
            await Task.Delay(50); // Thêm độ trễ ngắn giữa mỗi bước di chuyển để tránh nảy
        }

        // Tô sáng node cần tìm
        foundNode.IsHighlighted = true;
        UpdateTreeDrawing();

        // Dừng lại 2 giây tại node cần tìm
        await Task.Delay(2000);

        // Ẩn kiểm soát viên và đưa nó về node gốc
        foundNode.IsHighlighted = false;
        showController = false;
        if (binaryTreeService.Root != null)
        {
            controllerPosition = new Vector2((float)binaryTreeService.Root.PositionX, (float)binaryTreeService.Root.PositionY);
        }
        else
        {
            // Xử lý khi Root là null, đặt vị trí mặc định hoặc báo lỗi
            controllerPosition = new Vector2(800, 50); // Đặt vị trí mặc định nếu node gốc không tồn tại
        }
        UpdateTreeDrawing();

        return true;
    }

    // Hàm di chuyển kiểm soát viên dọc theo các đường line
    private async Task MoveControllerAlongPath(List<(double x1, double y1, double x2, double y2)> path)
    {
        foreach (var line in path)
        {
            // Tạo điểm đến dựa trên tọa độ x2, y2 của mỗi line
            Vector2 destination = new Vector2((float)line.x2, (float)line.y2);
            await MoveControllerToPosition(destination);
        }
    }

    private async Task MoveControllerToPosition(Vector2 destination)
    {
        float baseSpeed = 2f; // Tốc độ cơ bản ban đầu
        float movementSpeed = baseSpeed * Val3; // Điều chỉnh tốc độ theo hệ số nhân từ slider

        while ((destination - controllerPosition).Length() > movementSpeed) // Điều chỉnh điều kiện kiểm tra
        {
            // Tính toán hướng di chuyển
            Vector2 direction = Vector2.Normalize(destination - controllerPosition);

            // Điều chỉnh tốc độ dựa trên hệ số Val3
            controllerPosition += direction * movementSpeed;

            // Cập nhật giao diện sau mỗi bước di chuyển
            StateHasChanged();

            // Điều chỉnh thời gian delay cho chuyển động mượt
            await Task.Delay(16); // Giữ tốc độ 60fps
        }

        // Đảm bảo controller không vượt quá vị trí đích
        controllerPosition = destination;
        StateHasChanged();
    }

    private bool isMoving = false;

    private async Task MoveControllerSafely(Vector2 destination)
    {
        if (isMoving)
        {
            return; // Kiểm soát viên đang di chuyển, không thực hiện di chuyển mới
        }

        isMoving = true;
        await MoveControllerToPosition(destination);
        isMoving = false; // Đặt trạng thái lại sau khi hoàn thành di chuyển
    }


    private async Task OnControllerArrivedAtNode()
    {
        var foundNode = DFSFindNode(binaryTreeService.Root, searchNodeValue);
        if (foundNode != null)
        {
            // Di chuyển kiểm soát viên tới vị trí của node cần tìm
            Vector2 destination = new Vector2((float)foundNode.PositionX, (float)foundNode.PositionY);
            await MoveControllerSafely(destination);

            // Sau khi kiểm soát viên đã đến vị trí node, mới tô sáng node cần tìm
            foundNode.IsHighlighted = true;
            UpdateTreeDrawing();  // Cập nhật lại cây với node được tô sáng

            // Tắt sáng node sau 2 giây
            await Task.Delay(2000);
            foundNode.IsHighlighted = false;
            UpdateTreeDrawing(); // Cập nhật lại cây sau khi tắt sáng
        }
    }

    // Hàm DFS tìm node và thu thập danh sách LineID
    private NodeService? DFSFindNode(NodeService? currentNode, int targetValue)
    {
        if (currentNode == null) return null;

        // Nếu tìm thấy node, trả về node đó
        if (currentNode.Value == targetValue)
        {
            return currentNode;
        }

        // Duyệt con trái
        if (currentNode.LeftChild != null)
        {
            var foundInLeft = DFSFindNode(currentNode.LeftChild, targetValue);
            if (foundInLeft != null) return foundInLeft;
        }

        // Duyệt con phải
        if (currentNode.RightChild != null)
        {
            var foundInRight = DFSFindNode(currentNode.RightChild, targetValue);
            if (foundInRight != null) return foundInRight;
        }

        return null;
    }

    // Thu thập các đường nối từ node root đến node cần tìm (sử dụng LineID)
    private List<(double x1, double y1, double x2, double y2)> CollectLinesToNode(NodeService targetNode)
    {
        var path = new List<(double x1, double y1, double x2, double y2)>();
        var currentNode = targetNode;

        while (currentNode.Parent != null)
        {
            // Tìm line nối từ parent đến node hiện tại
            var line = binaryTreeService.GetLines().FirstOrDefault(l =>
                l.x1 == currentNode.Parent.PositionX &&
                l.y1 == currentNode.Parent.PositionY &&
                l.x2 == currentNode.PositionX &&
                l.y2 == currentNode.PositionY);

            if (line != default)
            {
                // Chỉ lấy các giá trị tọa độ x1, y1, x2, y2
                path.Insert(0, (line.x1, line.y1, line.x2, line.y2));
            }

            currentNode = currentNode.Parent;
        }

        return path;
    }
            
    private async Task HighlightPathToNode(NodeService? currentNode, int targetValue)
    {
        if (currentNode == null) return;

        // Kiểm tra nếu node hiện tại là node cần tìm
        if (currentNode.Value == targetValue)
        {
            currentNode.IsHighlighted = true; // Tô màu cho node được tìm thấy
            UpdateTreeDrawing(); // Cập nhật lại giao diện
            return;
        }

        // Tìm kiếm tiếp tục nếu node không phải là node gốc
        currentNode.IsHighlighted = true;
        UpdateTreeDrawing();

        await Task.Delay(1000);

        // Nhỏ hơn tìm bên trái, lớn hơn tìm bên phải
        if (targetValue < currentNode.Value)
        {
            await HighlightPathToNode(currentNode.LeftChild, targetValue);
        }
        else
        {
            await HighlightPathToNode(currentNode.RightChild, targetValue);
        }
    }

    private void EditNodeInBT()
    {
        if (selectedNode != null)
        {
            selectedNode.Value = editedNodeValue;
            statusMessage = $"Node value updated to: {editedNodeValue}";
            UpdateTreeDrawing();
        }
    }
}
