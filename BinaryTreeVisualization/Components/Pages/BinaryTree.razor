@page "/binarytree"
@rendermode InteractiveServer
@inject BinaryTreeService binaryTreeService
@inject IJSRuntime JSRuntime

<PageTitle>Binary Tree</PageTitle>

<div class="first-line">
    <div class="basic-operation">
        <p class="title">Basic Operations</p>
        <div>
            <input class="basic-op-input" type="number" @bind="newNodeValue" />

            <button class="button" @onclick="AddNode">Add</button>
            <button class="button" @onclick="EditNodeInBT">Edit</button>
            <button class="button" @onclick="DeleteNodeAnimation">Delete</button>
            <button class="button" @onclick="DeleteTree">Clear</button>
        </div>
    </div>

    <div class="find-operation">
        <p class="title">Find Node</p>
        <div>
            <!-- Input riêng cho tìm kiếm -->
            <input class="find-input" type="number" @bind="newNodeValue" />

            <!-- Dropdown chọn phương thức tìm kiếm -->

            <select @onchange="OnSearchMethodChange">
                <option value="shortest-path">Shortest Path</option>
                <option value="dfs">DFS Visualization</option>
                <option value="bfs">BFS Visualization</option>
            </select>

            <!-- Nút thực hiện tìm kiếm -->
            <button class="button" @onclick="StartFindNodeAnimation">Find</button>
        </div>
    </div>

    <div class="browse-tree">
        <p class="title">Selected Traversal Method</p>
        <div>
            <select @onchange="OnTraversalMethodChange">
                <option value="pre-order">Pre-order (NLR)</option>
                <option value="in-order" selected>In-order (LNR)</option>
                <option value="post-order">Post-order (LRN)</option>
                <option value="reverse-in-order">Reverse In-order (RNL)</option>
            </select>
            <button class="button" @onclick="StartTraversal" disabled="@isTraversing">Browse</button>
        </div>
    </div>

    <div class="speed-control">
        <p class="title-speed">@($"Animation Speed: x{Val3}")</p>
        <div class="custom-slider">
            <MatSlider  @bind-Value="@Val3" Discrete="true" Pin="true" TValue="int" ValueMin="1" ValueMax="3"></MatSlider>
        </div>
    </div>
</div>

<div class="random-tree">
    <p class="title">Create Random Tree</p>
    <div>
        <label>Number of nodes:</label>
        <input type="number" @bind="nodeCount" />
        <label style="margin-left: 5px">Min:</label>
        <input type="number" @bind="minValue" />
        <label style="margin-left: 5px">Max:</label>
        <input type="number" @bind="maxValue" />
        <button class="create-random-button" @onclick="CreateRandomTree">Create Random Tree</button>
    </div>
</div>

<p class="title">Traversal Order</p>
<div style="background-color: #f0f0f0; padding: 10px; border: 1px solid #ccc; border-radius: 5px;">
    @traversalOrderFragment
</div>




<!-- Thông báo trạng thái -->
<p class="status">@($"Status: {statusMessage}")</p>

<!-- Khối SVG -->
<svg width="100%" height="100vh" style="overflow: visible;">
    @foreach (var line in lines)
    {
        <!-- Đường nối giữa các node -->
        <line x1="@line.x1" y1="@line.y1" x2="@line.x2" y2="@line.y2"
              stroke="@((line.IsHighlighted) ? "yellow" : "black")" stroke-width="2" />
    }

    @foreach (var nodePosition in nodePositions)
    {
        <!-- Vẽ hình tròn cho node, tô màu nếu là node được thêm -->
        <circle class="node-circle @((nodePosition.node == selectedNode) ? "selected-node" : "")"
                cx="@nodePosition.x" cy="@nodePosition.y" r="20" stroke="black" stroke-width="2"
                fill="@GetNodeFillColor(nodePosition.node)"
                @onclick="(() => OnNodeClick(nodePosition.node))"
                @oncontextmenu:preventDefault="true"
                @oncontextmenu="(() => ShowDropdown(nodePosition.node))" />

        <!-- Sử dụng RenderFragment để in giá trị -->
        @((RenderFragment)((builder) =>
            {
                builder.OpenElement(0, "text");
                builder.AddAttribute(1, "x", nodePosition.x);
                builder.AddAttribute(2, "y", nodePosition.y);
                builder.AddAttribute(3, "text-anchor", "middle");
                builder.AddAttribute(4, "dominant-baseline", "middle");
                builder.AddAttribute(5, "dy", "0.35em"); // Điều chỉnh vị trí văn bản
                builder.AddAttribute(6, "font-size", "12");
                builder.AddAttribute(7, "font-weight", "bold");
                builder.AddAttribute(8, "fill", "black");
                builder.AddAttribute(9, "cursor", "pointer");
                builder.AddAttribute(10, "onclick", EventCallback.Factory
                .Create(this, () => OnNodeClick(nodePosition.node)));
                builder.AddContent(11, nodePosition.node.Value.ToString());
                builder.CloseElement();
            }))

        <!-- Dropdown menu -->
        @if (showDropdown)
        {
            <foreignObject x="@dropdownX" y="@dropdownY" width="160" height="220"
                           xmlns:xhtml="http://www.w3.org/1999/xhtml">
                <xhtml:div class="dropdown-menu">
                    <xhtml:button class="dropdown-button"
                                  @onclick="() => AddNodeToDirection(true)">Add Left Child</xhtml:button>
                    <xhtml:button class="dropdown-button"
                                  @onclick="() => AddNodeToDirection(false)">Add Right Child</xhtml:button>
                    <xhtml:button class="dropdown-button"
                                  @onclick="() => SwitchChild()">Switch Child</xhtml:button>
                    <xhtml:button class="dropdown-button"
                                  @onclick="HideDropdown">Close</xhtml:button>
                </xhtml:div>
            </foreignObject>
        }
    }

    <!-- Hình tròn kiểm soát viên -->
    @if (showController)
    {
        <circle cx="@controllerPosition.X" cy="@controllerPosition.Y" r="20" stroke="green" stroke-width="3" fill="none" />
    }
</svg>

@code {
    @using BinaryTreeVisualization.Components.Services
    @using System.Numerics

    // Cụm biến liên quan đến Node và Node Selection
    private int newNodeValue;
    private NodeService? selectedNode;
    private List<(NodeService node, double x, double y)> nodePositions = new();
    private List<(double x1, double y1, double x2, double y2, bool IsHighlighted, Guid LineID)> lines = new();

    // Cụm biến liên quan đến Traversal và Duyệt cây
    private string selectedTraversalMethod = "in-order";
    private string traversalOrderDisplay = "";
    private bool isTraversing = false;
    private List<TraversalStep> traversalSteps = new();

    public class TraversalStep
    {
        public int Value { get; set; }
        public NodeService Node { get; set; } // Thêm thuộc tính Node

        public bool IsVisible { get; set; } // Thuộc tính hiển thị

        public TraversalStep(NodeService node)
        {
            Node = node;
            Value = node.Value;
            node.IsVisible = false;
        }
    }

    private RenderFragment traversalOrderFragment = builder => { };
    public List<int> traversalOrder = new(); // Lưu các giá trị đã duyệt 


    //Biến liên quan tới tìm node theo DFS hoặc BFS
    private int searchValue; // Giá trị để tìm kiếm node
    private string selectedSearchMethod = "shortest-path"; // Phương thức tìm kiếm được chọn


    // Cụm biến liên quan đến Random Tree Generation
    private int nodeCount, minValue, maxValue;

    // Cụm biến liên quan đến Dropdown Menu
    private bool showDropdown = false;
    private double dropdownX, dropdownY;

    // Cụm biến liên quan đến Animation và Controller
    private bool showController = false;
    private Vector2 controllerPosition = new(0, 0);
    private int _val3 = 1;
    public int Val3
    {
        get => _val3;
        set
        {
            _val3 = value;
            this.StateHasChanged();
        }
    }

    // Biến thông báo trạng thái
    private string statusMessage = "";

    private string GetNodeFillColor(NodeService node)
    {
        if (node.IsHighlighted) // Ưu tiên màu vàng nếu node đang được tìm kiếm
        {
            return "yellow";
        }
        else if (node == selectedNode) // Nếu node được chọn, tô màu xanh lá
        {
            return "lightgreen";
        }
        return "white"; // Màu mặc định cho các node khác
    }

    // Hàm thay đổi phương thức tìm kiếm
    private void OnSearchMethodChange(ChangeEventArgs e)
    {
        selectedSearchMethod = e.Value?.ToString() ?? "shortest-path";
    }



    private async Task AddNode()
    {
        Guid newNodeID;
        if (selectedNode == null)
        {
            // Nếu chưa chọn nút nào, thêm nút gốc
            newNodeID = binaryTreeService.AddNodeToBinaryTree(newNodeValue, null);
        }
        else
        {
            // Nếu đã chọn nút, thêm vào nút đã chọn
            newNodeID = binaryTreeService.AddNodeToBinaryTree(newNodeValue, selectedNode);
        }

        UpdateTreeDrawing();



        HighlightNodeAndLine(newNodeID);
        await Task.Delay(2000);

        RemoveHighlighting();
        UpdateTreeDrawing();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addOutsideClickListener", DotNetObjectReference.Create(this));
        }
    }

    private void ShowDropdown(NodeService node)
    {
        selectedNode = node;
        dropdownX = node.PositionX - 20;
        dropdownY = node.PositionY;
        showDropdown = true;
    }

    [JSInvokable]
    public void HideDropdown()
    {
        showDropdown = false;
        StateHasChanged();
    }

    private async Task AddNodeToDirection(bool selectedLeftChild)
    {
        Guid newNodeID;
        if (selectedNode != null)
        {
            newNodeID = binaryTreeService.AddNodeToBinaryTree(newNodeValue, selectedNode, selectedLeftChild);
            UpdateTreeDrawing();

            HighlightNodeAndLine(newNodeID);
            HideDropdown();
            await Task.Delay(2000);

            RemoveHighlighting();
            UpdateTreeDrawing();
        }
    }

    private void SwitchChild()
    {
        if (selectedNode != null)
        {
            var leftChild = selectedNode.LeftChild;
            var rightChild = selectedNode.RightChild;

            // Nếu không có child nào
            if (leftChild == null && rightChild == null)
            {
                return;
            }

            // Nếu cả hai child đều tồn tại, hoán đổi vị trí
            if (leftChild != null && rightChild != null)
            {
                selectedNode.LeftChild = rightChild;
                selectedNode.RightChild = leftChild;
            }
            // Nếu chỉ có child trái
            else if (leftChild != null)
            {
                selectedNode.RightChild = leftChild;
                selectedNode.LeftChild = null; // Xóa child trái
            }
            // Nếu chỉ có child phải
            else if (rightChild != null)
            {
                selectedNode.LeftChild = rightChild;
                selectedNode.RightChild = null; // Xóa child phải
            }

            // Cập nhật lại giao diện
            HideDropdown();
            UpdateTreeDrawing();
        }
    }


    private void UpdateTraversalOrderFragment(int index)
    {
        traversalOrderFragment = builder =>
        {
            for (int i = 0; i <= index; i++)
            {


                builder.OpenElement(0, "span");
                builder.AddContent(1, traversalSteps[i].Value);
                builder.CloseElement();

                if (i < traversalSteps.Count - 1)
                {
                    builder.OpenElement(2, "span");
                    builder.AddContent(3, " -> ");
                    builder.CloseElement();
                }

            }
        };

        StateHasChanged();
    }



    private void OnTraversalMethodChange(ChangeEventArgs e)
    {
        // Cập nhật phương thức duyệt được chọn từ select tag
        selectedTraversalMethod = e.Value?.ToString() ?? "in-order";

        // Lấy danh sách các node theo kiểu duyệt
        var nodes = binaryTreeService.TraverseTree(binaryTreeService.Root, selectedTraversalMethod);

        // Khởi tạo lại danh sách traversalSteps dựa trên danh sách nodes
        traversalSteps = nodes.Select(node => new TraversalStep(node)).ToList();

        StateHasChanged(); // Cập nhật giao diện để hiển thị những thay đổi mới
    }



    private async Task StartTraversal()
    {
        if (isTraversing) return;

        isTraversing = true;

        // Lấy danh sách các node theo kiểu duyệt
        var nodes = binaryTreeService.TraverseTree(binaryTreeService.Root, selectedTraversalMethod);

        // Khởi tạo danh sách traversalSteps từ nodes
        traversalSteps = nodes.Select(node => new TraversalStep(node)).ToList();

        StateHasChanged();

        // Bắt đầu hoạt ảnh duyệt cây
        await StartTraversalAnimation(traversalSteps.Select(ts => ts.Node).ToList());

        isTraversing = false;
        StateHasChanged();
    }




    private async Task StartTraversalAnimation(List<NodeService> traversalOrderNodes)
    {
        showController = true; // Hiển thị kiểm soát viên
        StateHasChanged(); // Cập nhật giao diện

        for (int i = 0; i < traversalOrderNodes.Count; i++)
        {
            var node = traversalOrderNodes[i];

            // Di chuyển kiểm soát viên tới node hiện tại
            await MoveControllerToPosition(new Vector2((float)node.PositionX, (float)node.PositionY));

            // Cập nhật RenderFragment cho bước hiện tại
            UpdateTraversalOrderFragment(i);

            // Tô sáng node hiện tại
            node.IsHighlighted = true;
            UpdateTreeDrawing();

            // Dừng lại một chút dựa trên tốc độ từ slider
            await Task.Delay((int)(1000 / Val3));

            // Bỏ tô sáng node sau khi hoàn thành bước này
            node.IsHighlighted = false;
            UpdateTreeDrawing();
        }

        showController = false; // Ẩn kiểm soát viên sau khi duyệt xong
        StateHasChanged();
        OnInitialized();
    }





    private void RemoveHighlighting()
    {
        foreach (var node in nodePositions)
        {
            node.node.IsHighlighted = false;
        }

        for (int i = 0; i < lines.Count; i++)
        {
            lines[i] = (lines[i].x1, lines[i].y1, lines[i].x2, lines[i].y2, IsHighlighted: false, lines[i].LineID);
        }
    }

    private void HighlightNodeAndLine(Guid newNodeID)
    {
        var newNode = nodePositions.FirstOrDefault(np => np.node.NodeID == newNodeID);
        if (newNode.node == null) return;

        newNode.node.IsHighlighted = true;

        var parentLine = binaryTreeService.GetParentLine(newNode.node);
        if (parentLine != null)
        {
            var lineToHighlight = lines.FirstOrDefault(line =>
                line.x1 == parentLine.Value.x1 && line.y1 == parentLine.Value.y1 &&
                line.x2 == parentLine.Value.x2 && line.y2 == parentLine.Value.y2);

            if (lineToHighlight != default)
            {
                int index = lines.IndexOf(lineToHighlight);
                if (index != -1)
                {
                    lines[index] = (lines[index].x1, lines[index].y1, lines[index].x2, lines[index].y2, IsHighlighted: true, lines[index].LineID);
                }
            }
        }
    }

    private void UpdateTreeDrawing()
    {
        var nodesInTraversalOrder = binaryTreeService.TraverseTree(binaryTreeService.Root, selectedTraversalMethod);

        if (binaryTreeService.Root != null)
        {
            binaryTreeService.AssignPositionsBasedOnTreeStructure(binaryTreeService.Root, binaryTreeService.GetRootX(), binaryTreeService.GetRootY(), 200);
        }

        nodePositions = binaryTreeService.GetNodePositions(binaryTreeService.Root, selectedTraversalMethod);

        lines = binaryTreeService.GetLines()
                           .Select(line => (
                               line.x1, line.y1, line.x2, line.y2,
                               IsHighlighted: false,
                               LineID: Guid.NewGuid()
                           )).ToList();
        // Cập nhật dãy số duyệt cây
        traversalOrderDisplay = string.Join(" -> ", nodesInTraversalOrder.Select(n => n.Value));
        StateHasChanged();
    }

    private void CreateRandomTree()
    {
        // Đặt lại và tạo cây mới
        binaryTreeService.ResetTree();
        binaryTreeService.BuildRandomTree(nodeCount, minValue, maxValue, "BinarySearchTree");

        // Cập nhật giao diện cây
        UpdateTreeDrawing();
        traversalOrderFragment = builder => { };

        // Lấy danh sách các node từ cây mới
        var nodes = binaryTreeService.TraverseTree(binaryTreeService.Root, selectedTraversalMethod);

        // Khởi tạo danh sách traversalSteps từ danh sách nodes
        traversalSteps = nodes.Select(node => new TraversalStep(node)).ToList();

        // Cập nhật dãy số hiển thị trong giao diện
        traversalOrderDisplay = string.Join(" -> ", nodes.Select(n => n.Value));

        // Làm mới giao diện sau khi tạo cây mới
        StateHasChanged();
    }

    private void DeleteTree()
    {
        binaryTreeService.ResetTree();
        UpdateTreeDrawing();
        StateHasChanged();
    }

    //Hàm để lưu thông tin và tô màu node được chọn
    private void OnNodeClick(NodeService node)
    {
        if (selectedNode == node)
        {
            DeselectNode();
        }
        else
        {
            selectedNode = node; // Gán node mới được chọn
            newNodeValue = selectedNode.Value; // Hiển thị giá trị của node trong input
            statusMessage = $"Node {node.Value} is selected";
        }

        UpdateTreeDrawing();
    }

    [JSInvokable]
    public void DeselectNode()
    {
        selectedNode = null; // Hủy chọn node
        newNodeValue = 0; // Xóa giá trị hiện tại nếu cần
        statusMessage = "Node deselected.";
        StateHasChanged();
    }

    private void EditNodeInBT()
    {
        if (selectedNode != null)
        {
            selectedNode.Value = newNodeValue;
            statusMessage = $"Node value updated to {newNodeValue}";
            UpdateTreeDrawing();
        }
    }

    private async Task DeleteNodeAnimation()
    {
        // Gọi hàm tìm kiếm và thực hiện animation trước
        bool result = await ShortestPathVisualization(newNodeValue);

        // Nếu tìm thấy node thì thực hiện xóa
        if (result)
        {
            var nodeToDelete = DFSFindNode(binaryTreeService.Root, newNodeValue);
            if (nodeToDelete != null)
            {
                binaryTreeService.DeleteNode(nodeToDelete); // Gọi hàm xóa node và các con của nó
                statusMessage = $"Node {newNodeValue} and its children have been deleted.";
            }
            else
            {
                statusMessage = $"Node {newNodeValue} does not exist.";
            }
        }
        else
        {
            statusMessage = $"Node {newNodeValue} không tồn tại.";
        }
        DeselectNode(); // Hủy chọn node sau khi xóa

        UpdateTreeDrawing(); // Cập nhật lại hiển thị cây sau khi xóa
    }

    // --------------------- FIND NODE ANIMATION HERE ---------------------

    protected override void OnInitialized()
    {
        // Cài đặt vị trí kiểm soát viên ở node gốc
        if (binaryTreeService.Root != null)
        {
            controllerPosition = new Vector2((float)binaryTreeService.Root.PositionX, (float)binaryTreeService.Root.PositionY);
        }
        else
        {
            controllerPosition = new Vector2(800, 50); // Nếu chưa có node gốc, đặt vị trí mặc định
        }

        showController = false; // Kiểm soát viên ẩn
    }

    private async Task StartFindNodeAnimation()
    {
        if (isTraversing) return; // Nếu đang duyệt hoặc tìm kiếm, không thực hiện thêm.


        isTraversing = true;

        switch (selectedSearchMethod)
        {
            case "dfs":
                // Gọi trực tiếp DFSVisualization cho tìm kiếm
                await DFSVisualization(binaryTreeService.Root, newNodeValue);
                break;

            case "bfs":
                // Lấy danh sách node theo BFS và khởi chạy animation
                var bfsNodes = GetBFSPath(binaryTreeService.Root, newNodeValue);
                traversalSteps = bfsNodes.Select(node => new TraversalStep(node)).ToList();
                StateHasChanged();
                await StartTraversalAnimation(traversalSteps.Select(ts => ts.Node).ToList());
                break;

            case "shortest-path":
                // Lấy danh sách node theo đường đi ngắn nhất và khởi chạy animation
                var shortestPathNodes = GetShortestPath(binaryTreeService.Root, newNodeValue);
                traversalSteps = shortestPathNodes.Select(node => new TraversalStep(node)).ToList();
                StateHasChanged();
                await StartTraversalAnimation(traversalSteps.Select(ts => ts.Node).ToList());
                break;

            default:
                statusMessage = "Invalid search method selected.";
                break;
        }

        isTraversing = false;
        StateHasChanged(); // Cập nhật giao diện
    }


    private List<NodeService> GetDFSPath(NodeService? root, int targetValue)
    {
        var result = new List<NodeService>();
        DFSHelper(root, targetValue, result);
        return result;
    }



    private bool DFSHelper(NodeService? node, int targetValue, List<NodeService> result)
    {
        if (node == null) return false;

        // Thêm node hiện tại vào kết quả
        result.Add(node);

        // Nếu tìm thấy node mục tiêu, dừng lại
        if (node.Value == targetValue) return true;

        // Duyệt qua con trái
        if (DFSHelper(node.LeftChild, targetValue, result)) return true;

        // Duyệt qua con phải
        if (DFSHelper(node.RightChild, targetValue, result)) return true;

        // Nếu không tìm thấy ở cả hai nhánh, loại bỏ node khỏi danh sách
        result.Remove(node);
        return false;
    }





    private List<NodeService> GetBFSPath(NodeService? root, int targetValue)
    {
        var queue = new Queue<NodeService>();
        var result = new List<NodeService>();

        if (root != null) queue.Enqueue(root);

        while (queue.Count > 0)
        {
            var node = queue.Dequeue();
            result.Add(node);

            if (node.Value == targetValue) break;

            if (node.LeftChild != null) queue.Enqueue(node.LeftChild);
            if (node.RightChild != null) queue.Enqueue(node.RightChild);
        }

        return result;
    }
    private List<NodeService> GetShortestPath(NodeService? root, int targetValue)
    {
        var result = new List<NodeService>();
        var node = DFSFindNode(root, targetValue); // Tìm node theo DFS

        while (node != null)
        {
            result.Insert(0, node); // Thêm vào đầu danh sách để tạo đường đi từ root
            node = node.Parent;
        }

        return result;
    }



    private async Task<bool> BFSVisualization(NodeService? node, int targetValue)
    {
        if (node == null) return false;

        var queue = new Queue<NodeService>();
        queue.Enqueue(node);

        // Tập hợp các node đã được tô sáng (để bỏ tô sáng sau khi hoàn thành)
        var visitedNodes = new List<NodeService>();

        while (queue.Count > 0)
        {
            var currentNode = queue.Dequeue();

            // Di chuyển kiểm soát viên đến node hiện tại
            showController = true;
            await MoveControllerToPosition(new Vector2((float)currentNode.PositionX, (float)currentNode.PositionY));

            // Tô sáng node hiện tại
            currentNode.IsHighlighted = true;
            visitedNodes.Add(currentNode); // Lưu node đã được tô sáng
            UpdateTreeDrawing();
            await Task.Delay((int)(1000 / Val3));

            // Kiểm tra nếu đây là node cần tìm
            if (currentNode.Value == targetValue)
            {
                statusMessage = $"Found node {targetValue} successfully.";
                await Task.Delay(2000); // Dừng lại 2 giây để hiển thị thông báo

                // Bỏ tô sáng tất cả các node đã được duyệt
                RemoveHighlighting();
                showController = false;
                OnInitialized();
                return true; // Kết thúc tìm kiếm
            }

            // Thêm các con của node vào hàng đợi
            if (currentNode.LeftChild != null) queue.Enqueue(currentNode.LeftChild);
            if (currentNode.RightChild != null) queue.Enqueue(currentNode.RightChild);
        }

        statusMessage = $"Node {targetValue} does not exist.";
        RemoveHighlighting(); // Bỏ tô sáng nếu không tìm thấy
        showController = false;
        OnInitialized();
        return false;
    }




    private async Task<bool> DFSVisualization(NodeService? node, int targetValue)
    {

        if (node == null) return false;


        // Di chuyển kiểm soát viên đến node hiện tại
        showController = true;
        await MoveControllerToPosition(new Vector2((float)node.PositionX, (float)node.PositionY));

        // Tô sáng node hiện tại
        node.IsHighlighted = true;
        UpdateTreeDrawing();

        

        await Task.Delay((int)(1000 / Val3));

        // Kiểm tra nếu đây là node cần tìm
        if (node.Value == targetValue)
        {
            statusMessage = $"Found node {targetValue} successfully.";
            await Task.Delay(2000); // Dừng lại 2 giây để hiển thị thông báo

            // Bỏ tô sáng tất cả các node đã duyệt
            RemoveHighlighting();
            showController = false;
            OnInitialized();
            traversalOrderFragment = builder => { };
            UpdateTreeDrawing();
            return true; // Kết thúc tìm kiếm
        }

        // Tiếp tục tìm kiếm ở nhánh trái
        bool foundInLeft = await DFSVisualization(node.LeftChild, targetValue);
        if (foundInLeft) return true;

        // Tiếp tục tìm kiếm ở nhánh phải
        bool foundInRight = await DFSVisualization(node.RightChild, targetValue);
        if (foundInRight) return true;

        // Bỏ tô sáng node nếu không tìm thấy
        node.IsHighlighted = false;
        OnInitialized();
        UpdateTreeDrawing();
        return false;
    }





    // Hàm tìm kiếm node và di chuyển kiểm soát viên dọc theo đường đi với độ trễ
    private async Task<bool> ShortestPathVisualization(int targetValue)
    {
        // Tìm node cần tìm bằng DFS
        var foundNode = DFSFindNode(binaryTreeService.Root, targetValue);

        if (foundNode == null)
        {
            statusMessage = $"Node {targetValue} does not exist."; // Thông báo nếu không tìm thấy
            return false;
        }

        // Nếu tìm thấy node cần tìm và nó là node gốc
        if (foundNode == binaryTreeService.Root)
        {
            foundNode.IsHighlighted = true; // Tô sáng node gốc
            showController = true;
            UpdateTreeDrawing();
            statusMessage = $"Found root node {targetValue}.";
            await Task.Delay(2000); // Dừng lại 2 giây
            foundNode.IsHighlighted = false; // Tắt sáng node gốc sau 2 giây
            showController = false;
            UpdateTreeDrawing();
            return true; // Kết thúc tìm kiếm
        }

        // Thu thập danh sách các LineID từ root đến node cần tìm
        var path = CollectLinesToNode(foundNode);

        if (path.Count == 0)
        {
            statusMessage = "No path found.";
            return false;
        }

        // Hiển thị kiểm soát viên
        showController = true;

        // Di chuyển kiểm soát viên dọc theo các line với độ trễ để giảm hiện tượng nảy
        foreach (var line in path)
        {
            Vector2 destination = new Vector2((float)line.x2, (float)line.y2);
            await MoveControllerToPosition(destination);
            await Task.Delay(50); // Thêm độ trễ ngắn giữa mỗi bước di chuyển để tránh nảy
        }

        // Tô sáng node cần tìm
        foundNode.IsHighlighted = true;
        UpdateTreeDrawing();

        // Dừng lại 2 giây tại node cần tìm
        await Task.Delay(2000);

        // Ẩn kiểm soát viên và đưa nó về node gốc
        foundNode.IsHighlighted = false;
        OnInitialized();
        UpdateTreeDrawing();

        return true;
    }


    private async Task MoveControllerToPosition(Vector2 destination)
    {
        float baseSpeed = 2f; // Tốc độ cơ bản ban đầu
        float movementSpeed = baseSpeed * Val3; // Điều chỉnh tốc độ theo hệ số nhân từ slider

        while ((destination - controllerPosition).Length() > movementSpeed) // Điều chỉnh điều kiện kiểm tra
        {
            // Tính toán hướng di chuyển
            Vector2 direction = Vector2.Normalize(destination - controllerPosition);

            // Điều chỉnh tốc độ dựa trên hệ số Val3
            controllerPosition += direction * movementSpeed;

            // Cập nhật giao diện sau mỗi bước di chuyển
            StateHasChanged();

            // Điều chỉnh thời gian delay cho chuyển động mượt
            await Task.Delay(16); // Giữ tốc độ 60fps
        }

        // Đảm bảo controller không vượt quá vị trí đích
        controllerPosition = destination;
        StateHasChanged();
    }


    // Hàm DFS tìm node và thu thập danh sách LineID
    private NodeService? DFSFindNode(NodeService? currentNode, int targetValue)
    {
        if (currentNode == null) return null;

        // Nếu tìm thấy node, trả về node đó
        if (currentNode.Value == targetValue)
        {
            return currentNode;
        }

        // Duyệt con trái
        if (currentNode.LeftChild != null)
        {
            var foundInLeft = DFSFindNode(currentNode.LeftChild, targetValue);
            if (foundInLeft != null) return foundInLeft;
        }

        // Duyệt con phải
        if (currentNode.RightChild != null)
        {
            var foundInRight = DFSFindNode(currentNode.RightChild, targetValue);
            if (foundInRight != null) return foundInRight;
        }

        return null;
    }

    // Thu thập các đường nối từ node root đến node cần tìm (sử dụng LineID)
    private List<(double x1, double y1, double x2, double y2)> CollectLinesToNode(NodeService targetNode)
    {
        var path = new List<(double x1, double y1, double x2, double y2)>();
        var currentNode = targetNode;

        while (currentNode.Parent != null)
        {
            // Tìm line nối từ parent đến node hiện tại
            var line = binaryTreeService.GetLines().FirstOrDefault(l =>
                l.x1 == currentNode.Parent.PositionX &&
                l.y1 == currentNode.Parent.PositionY &&
                l.x2 == currentNode.PositionX &&
                l.y2 == currentNode.PositionY);

            if (line != default)
            {
                // Chỉ lấy các giá trị tọa độ x1, y1, x2, y2
                path.Insert(0, (line.x1, line.y1, line.x2, line.y2));
            }

            currentNode = currentNode.Parent;
        }

        return path;
    }
}